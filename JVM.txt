1. The stack memory stores items that have a very short life, like local 
   variables and methods. The heap stores objects and classes.

2. Jvm class loader: loads the class, verifies it, prepares memory for it's static
                     variables and initializes them.
   Jvm memory containes: a. Method area - stores all class level information.
                         b. Heap area -  stores information of all objects.
				 c. Stack area - stores methods calls and local variables.
				 d. PC Registers - stores address of current execution instruction.
				 e. Native method stacks - stores native method information.
   Jvm execution engine: reads the byte-code line by line, uses data and information
                         present in various memory area and executes instructions.

3. The jvm allows to develop Java code on one system and run it on any other Java enabled 
   system without any adjustment. In addition, the jvm is useful for garbage collection
   bytecode loading, verification and more.

4. Byte code is the code generated by the compiler after the compilation of a Java 
   program. 

5. a. Method area - stores all class level information.
   b. Heap area -  stores information of all objects.
   c. Stack area - stores methods calls and local variables.
   d. PC Registers - stores address of current execution instruction.
   e. Native method stacks - stores native method information.

6. Just in time compilation is a way of executing computer code that involves 
   compilation during execution of a program (at run time) rather than before execution.